name: Build and deploy Flask + Redis + Nginx with docker compose from github action to GCP compute engine.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.HARMONY_GCP_PROJECT_ID }}
  GCE_INSTANCE: instance-1
  GCE_INSTANCE_ZONE: us-west1-b

jobs: 
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_KEY }}'

    # Setup gcloud CLI
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    - run: |-
        gcloud --quiet auth configure-docker
        gcloud auth configure-docker us-west1-docker.pkg.dev


    # Build the Docker image
    - name: Build
      run: |-
        docker-compose build

    # Push images to Artifact Registry
    - name: Publish
      run: |-
        docker tag a_flask ${{ secrets.A_FLASK }}
        docker tag a_nginx ${{ secrets.A_NGINX }}
        docker push ${{ secrets.A_FLASK }}
        docker push ${{ secrets.A_NGINX }} 
        ls
        

    # - name: Update startup script to prune and update IP address
    #   run: |-
    #     gcloud compute instances add-metadata $GCE_INSTANCE \
    #       --zone "$GCE_INSTANCE_ZONE" \
    #       --metadata=startup-script="#! /bin/bash
    #         docker image prune -af
    #         docker pull ${{ secrets.A_FLASK }}
    #         docker pull ${{ secrets.A_NGINX }}
    #         curl --location --request GET 'domains.google.com/nic/update?hostname=<vivien.fun>' \
    #           --header 'User-Agent: VM' \
    #           --header 'Authorization: Basic $DDNS_AUTH_STRING'"

    # - name: Deploy
    #   run: |-
    #     gcloud compute instances update-container "$GCE_INSTANCE" \
    #       --zone "$GCE_INSTANCE_ZONE" \
    #       --container-image ${{ secrets.A_FLASK }}
    #       --container-image ${{ secrets.A_NGINX }}

    # # Purge old images from GCR (not latest)
    # - name: Purge GCR images
    #   run: |-
    #     gcloud container images list-tags gcr.io/$PROJECT_ID/$GCE_INSTANCE-image \
    #       --format="get(digest)" --filter="NOT tags=$GITHUB_SHA" | \
    #       awk -v image_path="gcr.io/$PROJECT_ID/$GCE_INSTANCE-image@" '{print image_path $1}' | \
    #       xargs -r gcloud container images delete --force-delete-tags --quiet
