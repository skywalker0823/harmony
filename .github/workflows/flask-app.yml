name: Build and deploy Flask + Redis + Nginx with docker compose from github action to GCP compute engine.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.HARMONY_GCP_PROJECT_ID }}
  GCE_INSTANCE: instance-1
  GCE_INSTANCE_ZONE: us-west1-b

jobs: 
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_KEY }}'

    # flask app test
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11.0
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask
    - name: Test Flask app
      run: |
        python app.py
        
  

    # Setup gcloud CLI
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    - run: |-
        gcloud --quiet auth configure-docker
        gcloud auth configure-docker us-west1-docker.pkg.dev


    # Build the Docker image
    - name: Build
      run: |-
        docker-compose build

    # Push images to Artifact Registry
    - name: Publish
      run: |-
        docker tag a_flask ${{ secrets.A_FLASK }}
        docker tag a_nginx ${{ secrets.A_NGINX }}
        docker push ${{ secrets.A_FLASK }}
        docker push ${{ secrets.A_NGINX }} 
    # Update the container image on the GCE instance
    - name: Deploy
      run: |-
        gcloud compute instances update-container "$GCE_INSTANCE" \
          --zone "$GCE_INSTANCE_ZONE" \
          --container-image ${{ secrets.A_FLASK }}
          --container-image ${{ secrets.A_NGINX }}


    # - name: Deploy(update)
    #   run: |-
    #     gcloud compute instances update-container "$GCE_INSTANCE" \
    #       --zone "$GCE_INSTANCE_ZONE" \
    #       --container-image ${{ secrets.A_FLASK }}
    #       --container-image ${{ secrets.A_NGINX }}


    # # Purge old images from GCR (not latest)
    # - name: Purge GCR images
    #   run: |-
    #     gcloud compute ssh "$GCE_INSTANCE" --zone "$GCE_INSTANCE_ZONE"    
    #       --command 'docker system prune -af'







# Plan B
# # For convenience; this way we do not need to check if the VM already exists for the
#       # next step of creating a new instance.
#       # The quiet option causes it to ignore the error if the VM does not yet exist.
#       - name: Delete
#         continue-on-error: true
#         run: |-
#           gcloud compute instances delete "$GCE_INSTANCE" \
#             --zone "$GCE_INSTANCE_ZONE" \
#             --quiet
#       # Note service account permissions and scopes are two different things.
#       # This sets scopes such that the instance can access all services that the
#       # service account can access
#       - name: Deploy
#         run: |-
#           gcloud compute instances create-with-container "$GCE_INSTANCE" \
#             --zone "$GCE_INSTANCE_ZONE" \
#             --machine-type "$GCE_INSTANCE_MACHINE_TYPE" \
#             --service-account "${{ secrets.GCE_SERVICE_ACCOUNT_EMAIL }}" \
#             --scopes "https://www.googleapis.com/auth/cloud-platform" \
#             --container-image "${{ env.IMAGE_URI }}"